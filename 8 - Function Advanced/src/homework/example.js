/*** TASK 1 ***/
/*** –ó–ê–î–ê–ù–ò–ï 1 ***/

function getRandomInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);

  return Math.floor(Math.random() * (max - min + 1) + min);
}

/* initializing a recursion, wrap a value by n depth object */
/* –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–∫—É—Ä—Å–∏–∏, –æ–±–µ—Ä–Ω—É—Ç—å value –≤ –æ–±—ä–µ–∫—Ç –≥–ª—É–±–∏–Ω–æ–π –≤ n —É—Ä–æ–≤–Ω–µ–π */
const wrap = (n, value) => {
	// you must have some object to store all the nested objects inside.
	// –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã.
	const target = {};
	
	// recursively fill up a cursor with appropriate value key.
	// —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É value —Å–æ–≥–ª–∞—Å–Ω–æ —É—Å–ª–æ–≤–∏—é –∑–∞–¥–∞—á–∏.
	const wrapper = function(depth, cursor) {
		if (depth < 1) {
			// do some logic if you reach the bottom of recursion.
			// –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, –≤ —Å–ª—É—á–∞–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –±–∞–∑—ã —Ä–µ–∫—É—Ä—Å–∏–∏.
			
			// return the target.
			// –≤–µ—Ä–Ω—É—Ç—å target.
		}

		// call the recursion otherwise.
		// –∏–Ω–∞—á–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∫—É—Ä—Å–∏—é.
		return wrapper(/*...*/);
	};
	
	// run the recursion here but be careful! you must provide initial depth and cursor (current level object).
	// there should be depth levels of nesting, pay attention to it.
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏—é —Ç—É—Ç, –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã. –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ depth –∏ cursor (–æ–±—ä–µ–∫—Ç —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è).
	// –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏—è, –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤, –∏—Ö –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–≤–Ω–æ depth.
	return wrapper(/*...*/);
};

// Execute 1 task.
// –í—ã–∑–æ–≤ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.
const target = wrap(getRandomInt(5, 10), 'üôÉ');

// Log a result.
// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
console.log(target);

/*** TASK 2 ***/
/*** –ó–ê–î–ê–ù–ò–ï 2 ***/

/* returns true if value is smt like object structure and false if not */
/* –≤–µ—Ä–Ω—É—Ç—å true –µ—Å–ª–∏ value –ø–æ—Ö–æ–∂ –Ω–∞ –æ–±—ä–µ–∫—Ç, –∏–Ω–∞—á–µ –≤–µ—Ä–Ω—É—Ç—å false */
const isBase = (value) => { }

/* Do recursion */
/* –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏—é */
const unwrap = (target) => {
	return !isBase(target) 
		? (/*...*/) /* if condition true return target */ /* –ï—Å–ª–∏ target —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—é - –≤–µ—Ä–Ω—É—Ç—å target */
		: (/*...*/) /* otherwise do recursion */ /* –ò–Ω–∞—á–µ - –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∫—É—Ä—Å–∏—é */
};

// Execute 2 task.
// –í—ã–∑–æ–≤ –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.
const value = unwrap(target);

// Log a result.
// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
console.log(value);